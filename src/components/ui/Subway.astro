---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';
import Roundel from '../widgets/Roundel.astro';
import type { TflColor } from '~/tflColors';
import { TflColors } from '~/tflColors';
import { makeRoundel, type RoundelProps } from '../widgets/Roundel.astro';

export interface Props {
  color?: string;
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { color = 'primary', items = [], classes = {}, defaultIcon } = Astro.props as Props;

type SubwayType = 'Foundation'

type SubwayRoundel = {
  type: SubwayType;
  color: TflColor[keyof TflColor];
  rectColor: TflColor[keyof TflColor];
  textColor: TflColor[keyof TflColor];
};

export function* generateSubwayRoundels(type: SubwayType, label: string, s: number, col = 1): Generator<RoundelProps> {
  const roundels: SubwayRoundel[] = [
    { type: 'Foundation', color: TflColors.tflBakerloo, rectColor: TflColors.tflBakerloo, textColor: TflColors.tflWhite }
  ];

  const roundel = roundels.find((r) => r.type === type);
  if (!roundel) throw new Error(`Unknown type: ${type}`);

  const color = roundel.color;
  const rectColor = roundel.rectColor;
  const textColor = roundel.textColor;
  const size = s * col;

  yield makeRoundel(
    size,
    { x: 0, y: 0 },
    { label: label, fontSize: '10px', fontWeight: 'bold', color: textColor },
    { center: { x: 50, y: 50 }, radius: 1, color: 'white' },
    { center: { x: 50, y: 50 }, radius: 5, color: color },
    { top: 0, left: 0, color: rectColor, width: 10, height: 10 }
  );
}

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;

const roundels = 
    [generateSubwayRoundels('Foundation', "Moore's Law", 50, 1),
    generateSubwayRoundels('Foundation', "Latency", 50, 1),
    generateSubwayRoundels('Foundation', "Modularity", 50, 1),
    generateSubwayRoundels('Foundation', "The Wisdom of Deming", 50, 1)];
---

{
  items && items.length && (
    <div class={containerClass}>
      {items.map(({ title, description, icon, classes: itemClasses = {} }, index = 0) => (
        <div
          class={twMerge(
            'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
            <div>
              <div class="flex items-center justify-center">
                {
                  <Roundel {...roundels[index].next().value} />
                }
              </div>
            </div>
            {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
          </div>
          <div class={`pt-1 ${index !== items.length - 1 ? 'pb-8' : ''}`}>
            {title && <p class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} set:html={title} />}
            {description && (
              <p
                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            )}
          </div>
        </div>
      ))}
    </div>
  )
}
