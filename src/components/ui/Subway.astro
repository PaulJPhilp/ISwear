---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';
import Roundel from '../widgets/Roundel.astro';
import type { TflColor } from '~/tflColors';
import { TflColors } from '~/tflColors';
import type { RoundelProps } from '../widgets/Roundel.astro';
import { generateRoundel, registerRoundel } from '~/utils/generateRoundel';

export interface Props {
  color?: TflColor[keyof TflColor];
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { color = 'primary', items = [], classes = {}, defaultIcon } = Astro.props as Props;

type SubwayType = 'Foundation';

type SubwayRoundel = {
  type: SubwayType;
  color: TflColor[keyof TflColor];
  rectColor: TflColor[keyof TflColor];
  textColor: TflColor[keyof TflColor];
};

const subwayRoundel: RoundelProps = {
  size: 100,
  position: { x: 100, y: 100 },
  height: 100,
  width: 100,
  margin: 25,
  innerCircle: {
    radius: 50,
    color: TflColors.tflWhite,
    center: { x: 50, y: 50 },
  },
  outerCircle: {
    radius: 50,
    color: TflColors.tflWhite,
    center: { x: 50, y: 50 },
  },
  rect: {
    width: 100,
    height: 100,
    top: 0,
    left: 0,
    color: TflColors.tflBlue,
    border: {
      strokeWidth: 2,
      stroke: TflColors.tflBlue,
    },
  },
  label: { text: 'Subway', fontSize: '13px', fontWeight: 'bold', color: TflColors.tflWhite },
};

registerRoundel('Foundation', subwayRoundel);

const topics: string[] = ['Moore\'s Law', 'Latency', 'Modularity', 'Deming', 'Systems'];
const roundels = [
  generateRoundel("Moore's Law", 50),
  generateRoundel('Latency', 50),
  generateRoundel('Modularity', 50),
  generateRoundel('Deming', 50),
  generateRoundel('Systems', 50),
];

roundels.map((roundel, r) => registerRoundel(topics[r], roundel));

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
  items && items.length && (
    <div class={containerClass}>
      {items.map(({ title, description, icon, classes: itemClasses = {} }, index = 0) => (
        <div
          class={twMerge(
            'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
            <div>
              <div class="flex items-center justify-center">{<Roundel {...roundels[index]} />}</div>
            </div>
            {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
          </div>
          <div class={`pt-1 ${index !== items.length - 1 ? 'pb-8' : ''}`}>
            {title && <p class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} set:html={title} />}
            {description && (
              <p
                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            )}
          </div>
        </div>
      ))}
    </div>
  )
}
