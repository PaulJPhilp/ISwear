---
import type { CollectionEntry } from 'astro:content';
import { getCollection, getEntry } from 'astro:content';
import { twMerge } from 'tailwind-merge';
import { toSlug } from '~/utils/toSlug';
import StationMarker from './station/StationMarker.astro';
//import { StationName } from './station/StationName';
import DebugDiv from '../widgets/DebugDiv.astro';

interface Props {
  title: string;
  themeClass?: string;
}

// Types
interface TitleMapping {
  [key: string]: string;
}

interface StationError {
  code: 'STATION_NOT_FOUND';
  message: string;
}

// Constants
const TITLE_MAPPINGS: TitleMapping = {
  'Increasing Modularity': 'Law of Increasing Modularity',
};


const MAX_TITLE_LENGTH = 17;

// Utility functions

function formatTitle(text: string): string {
  if (text.length <= MAX_TITLE_LENGTH) return text;

  const spaceIndex = text.substring(0, MAX_TITLE_LENGTH).lastIndexOf(' ');
  if (spaceIndex === -1) return text;

  return `${text.slice(0, spaceIndex)}\n${text.slice(spaceIndex + 1)}`;
}

async function findStationEntry(title: string): Promise<CollectionEntry<'stations'>> {
  const mappedTitle = TITLE_MAPPINGS[title] || title;
  const slug = toSlug(mappedTitle);

  // Try exact match first
  const exactMatch = await getEntry('stations', slug);
  if (exactMatch) return exactMatch;

  // Try partial match
  const allStations = await getCollection('stations');
  const partialMatch = allStations.find((entry) => entry.id.startsWith(slug));

  if (partialMatch) return partialMatch;

  throw {
    code: 'STATION_NOT_FOUND',
    message: `Station entry not found: ${title} (slug: ${slug})`,
  } as StationError;
}

// Data fetching
const {
  title,
  themeClass,
} = Astro.props;

//const debug = import.meta.env.DEV || import.meta.env.DEBUG?.toLowerCase() === 'true'
const debug = false

console.log(`Station: ${title} debug: ${debug} ${import.meta.env.DEV}`);

---

{debug ? (
  <DebugDiv 
    color="green-500" 
    class={twMerge(
      'station relative flex items-center justify-center',
      'w-full sm:w-[calc(100%-2rem)] md:w-[calc(100%-3rem)] lg:w-[calc(100%-4rem)]',
      'min-h-[8rem] sm:min-h-[10rem] md:min-h-[12rem] lg:min-h-[14rem]',
      'p-4 sm:p-6 md:p-8 lg:p-10',
      themeClass
    )}
    sourceFile="src/components/subway/SubwayStation.astro"
    sourceLine={78}
    breakpoint="w-full sm:w-[calc(100%-2rem)] md:w-[calc(100%-3rem)] lg:w-[calc(100%-4rem)]"
    showBackground 
    forceShow
  >
    <div class="w-full h-full flex justify-center transition-transform duration-200 ease-in-out">
      <StationMarker debug={debug} />
    </div>
  </DebugDiv>
) : 
  <div class="relative w-full h-full flex justify-center transition-transform duration-200 ease-in-out">
    <StationMarker debug={debug} />

  </div>
}
