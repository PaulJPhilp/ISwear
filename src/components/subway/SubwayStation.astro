---
import type { CollectionEntry } from 'astro:content';
import { getCollection, getEntry } from 'astro:content';
import { twMerge } from 'tailwind-merge';
import { toSlug } from '~/utils/toSlug';
import StationMarker from './station/StationMarker.astro';
import { StationName } from './station/StationName';

interface Props {
  title: string;
  themeClass?: string;
}

// Types
interface TitleMapping {
  [key: string]: string;
}

interface StationError {
  code: 'STATION_NOT_FOUND';
  message: string;
}

// Constants
const TITLE_MAPPINGS: TitleMapping = {
  'Increasing Modularity': 'Law of Increasing Modularity',
};

const MAX_TITLE_LENGTH = 17;

// Utility functions

function formatTitle(text: string): string {
  if (text.length <= MAX_TITLE_LENGTH) return text;

  const spaceIndex = text.substring(0, MAX_TITLE_LENGTH).lastIndexOf(' ');
  if (spaceIndex === -1) return text;

  return `${text.slice(0, spaceIndex)}\n${text.slice(spaceIndex + 1)}`;
}

async function findStationEntry(title: string): Promise<CollectionEntry<'stations'>> {
  const mappedTitle = TITLE_MAPPINGS[title] || title;
  const slug = toSlug(mappedTitle);

  // Try exact match first
  const exactMatch = await getEntry('stations', slug);
  if (exactMatch) return exactMatch;

  // Try partial match
  const allStations = await getCollection('stations');
  const partialMatch = allStations.find((entry) => entry.id.startsWith(slug));

  if (partialMatch) return partialMatch;

  throw {
    code: 'STATION_NOT_FOUND',
    message: `Station entry not found: ${title} (slug: ${slug})`,
  } as StationError;
}

// Data fetching
const { title, themeClass } = Astro.props;

//const debug = import.meta.env.DEV || import.meta.env.DEBUG?.toLowerCase() === 'true'
const debug = false;

console.log(`Station: ${title} debug: ${debug} ${import.meta.env.DEV}`);
---

<div
  class="relative w-full flex justify-center transition-transform duration-200 ease-in-out border-2 border-purple-500"
>
  <StationName name={title} />
  <div class="absolute">
    <StationMarker debug={debug} />
  </div>
</div>
