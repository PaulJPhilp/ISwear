---
import { twMerge } from 'tailwind-merge';
import type { StationProps } from '~/types/station';
import DebugToolbar from '../widgets/DebugToolbar.astro';
import SubwaySegment from './SubwaySegment.astro';
import SubwayTitle from './SubwayTitle.astro';

export interface Props {
  stations: StationProps[];
  title: string;
  classes?: Record<string, string>;
  theme?: string;
}

const { stations, classes, title, theme = 'default' } = Astro.props;
const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
} = (classes ?? {}) as Record<string, string>;

const themeClass = `station-theme-${theme}`;
---

<DebugToolbar />

<div
  class={twMerge(
    'subway-timeline flex flex-col items-center w-full min-h-screen',
    'py-8 sm:py-12 md:py-16 lg:py-20 xl:py-24',
    themeClass,
    containerClass
  )}
  data-subway
  data-theme={theme}
>
  <SubwayTitle {title} {theme} {titleClass} />

  {/* Timeline container with improved responsive widths and spacing */}
  <div
    class={twMerge(
      'relative w-full mt-6 sm:mt-8 md:mt-10 lg:mt-12 xl:mt-16',
      'max-w-[280px] sm:max-w-[380px] md:max-w-[480px] lg:max-w-[580px] xl:max-w-[680px]'
    )}
  >
    <div class="relative">
      <div class="flex flex-col items-center justify-center">
        {
          stations.map((currentStation, index) => (
            <SubwaySegment
              station={currentStation}
              isLastSegment={index === stations.length - 1}
              isFirstSegment={index === 0}
              isOddSegment={index % 2 === 1}
              {themeClass}
              {panelClass}
            />
          ))
        }
      </div>
    </div>
  </div>
</div>

<style>
  /* Add smooth transitions for responsive changes */
  .subway-timeline {
    transition: padding 0.3s ease-in-out;
  }

  .subway-timeline > div {
    transition:
      max-width 0.3s ease-in-out,
      padding 0.3s ease-in-out,
      margin 0.3s ease-in-out;
  }
</style>

<script>
  // Listen for theme changes
  document.addEventListener('themechange', ((e: CustomEvent) => {
    const { theme } = e.detail;
    if (theme) {
      const title = document.querySelector('.subway-timeline h1');
      if (title) {
        // Update title color
        title.classList.forEach((className) => {
          if (className.startsWith('text-tfl')) {
            title.classList.remove(className);
          }
        });
        title.classList.add(`text-tfl${theme.charAt(0).toUpperCase() + theme.slice(1)}`);
      }
    }
  }) as EventListener);
</script>
