---
import { twMerge } from 'tailwind-merge';
import type { StationProps } from '~/types/station';
import SubwayTitle from './SubwayTitle.astro';
import SubwaySegment from './SubwaySegment.astro';

export interface Props {
  stations: StationProps[];
  title: string;
  classes?: Record<string, string>;
  theme?: string;
}

const { stations, classes, title, theme = 'default' } = Astro.props;
const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
} = (classes ?? {}) as Record<string, string>;

// Get the TfL color class if theme exists
const themeClass = `station-theme-${theme}`;
---

<div 
  class={twMerge(
    'subway-timeline flex flex-col items-center',
    themeClass,
    containerClass
  )} 
  data-subway 
  data-theme={theme}
>
  <SubwayTitle {title} {theme} {titleClass} />

  {/* Timeline container */}
  <div class="relative w-full max-w-[500px] px-32">
    {
      stations.map((currentStation, index) => (
        <SubwaySegment
          station={currentStation}
          isLastSegment={index === stations.length - 1}
          isFirstSegment={index === 0}
          isOddSegment={index % 2 === 1}
          {themeClass}
          {panelClass}
          debugStations={false}
        />
      ))
    }
  </div>
</div>

<script>
  // Listen for theme changes
  document.addEventListener('themechange', ((e: CustomEvent) => {
    const { theme } = e.detail;
    if (theme) {
      const title = document.querySelector('.subway-timeline h1');
      if (title) {
        // Update title color
        title.classList.forEach(className => {
          if (className.startsWith('text-tfl')) {
            title.classList.remove(className);
          }
        });
        title.classList.add(`text-tfl${theme.charAt(0).toUpperCase() + theme.slice(1)}`);
      }
    }
  }) as EventListener);
</script>
