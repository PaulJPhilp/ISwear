---
import type { Color } from '~/tflColors';
import { calcFontSize } from '~/utils/generateRoundel';

export interface RoundelBorderProps {
  strokeWidth: number;
  stroke: string;
}

export interface RoundelPosition {
  x: number;
  y: number;
}

export interface RoundelLabelProps {
  text: string;
  color: Color;
  fontSize?: string;
  fontWeight?: string;
}

export interface RoundelCircleProps {
  radius: number;
  color: Color;
  center: RoundelPosition;
  border?: RoundelBorderProps;
}

export interface RoundelRectangleProps {
  width: number;
  height: number;
  top: number;
  left: number;
  color: Color;
  border?: RoundelBorderProps;
}

export interface makeRoundelOptions {
  margin: number | undefined;
  outerCircleRatio: number | undefined;
  innerCircleRatio: number | undefined;
  rectHeightRatio: number | undefined;
  fontSize: number | undefined;
}

export interface RoundelProps {
  size: number;
  position: RoundelPosition;
  width: number;
  height: number;
  margin: number;
  innerCircle: RoundelCircleProps;
  outerCircle: RoundelCircleProps;
  rect: RoundelRectangleProps;
  label: RoundelLabelProps;
}

export interface RoundelDefinition {
  size: number;
  height: number;
  margin: number;
  position: RoundelPosition;
  label: RoundelLabelProps;
  color: Color;
  rectColor: Color;
  textColor: Color;
}

export interface Props {
  size: number;
  position: RoundelPosition;
  width: number;
  height: number;
  margin?: number;
  innerCircle: RoundelCircleProps;
  outerCircle: RoundelCircleProps;
  rect: RoundelRectangleProps;
  label: RoundelLabelProps;
}

const roundel = Astro.props;
---

<div 
  style={`margin: ${roundel.margin ?? '0'}`}
  class="transition-transform duration-300 ease-in-out hover:scale-110 cursor-pointer"
>
  <svg
    width={roundel.width}
    height={roundel.height}
    viewBox={`${roundel.position.x} ${roundel.position.y} ${roundel.width} ${roundel.height}`}
    xmlns="http://www.w3.org/2000/svg"
    class="transition-colors duration-300 ease-in-out"
  >
    <circle
      cx={roundel.outerCircle.center.x}
      cy={roundel.outerCircle.center.y}
      r={roundel.outerCircle.radius}
      fill={roundel.outerCircle.color}
      stroke={roundel.outerCircle.border?.stroke}
      stroke-width={roundel.outerCircle.border?.strokeWidth}
      class="transition-colors duration-300 ease-in-out hover:fill-current hover:text-blue-600"
    />
    <circle
      cx={roundel.innerCircle.center.x}
      cy={roundel.innerCircle.center.y}
      r={roundel.innerCircle.radius}
      fill={roundel.innerCircle.color}
      stroke={roundel.innerCircle.border?.stroke}
      stroke-width={roundel.innerCircle.border?.strokeWidth}
      class="transition-colors duration-300 ease-in-out hover:fill-current hover:text-white"
    />
    <rect
      x={roundel.rect.left}
      y={roundel.rect.top}
      width={roundel.rect.width}
      height={roundel.rect.height}
      fill={roundel.rect.color}
      stroke={roundel.rect.border?.stroke}
      stroke-width={roundel.rect.border?.strokeWidth}
      class="transition-colors duration-300 ease-in-out hover:fill-current hover:text-blue-600"
    />
    <text
      x={roundel.rect.left + roundel.rect.width / 2}
      y={roundel.rect.top + roundel.rect.height / 2}
      text-length={`${roundel.size}px`}
      dy="0.1em"
      text-anchor="middle"
      alignment-baseline="middle"
      fill={roundel.label.color}
      font-family="sans-serif"
      font-weight={`${roundel.label.fontWeight ?? 'normal'}`}
      font-size={`${roundel.label.fontSize ?? calcFontSize(roundel.size*2 , roundel.label.text)}`}
      class="transition-colors duration-300 ease-in-out hover:fill-current hover:text-white"
    >
      {roundel.label.text}
    </text>
  </svg>
</div>