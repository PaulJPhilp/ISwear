---
interface RoundelBorderProps {
  strokeWidth: number;
  stroke: string;
}

interface RoundelPosition {
  x: number;
  y: number;
}

interface RoundelLabelProps {
  text: string;
  color: string;
  fontSize: string;
  fontWeight?: string;
}

interface RoundelCircleProps {
  radius: number;
  color: string;
  center: RoundelPosition;
  border?: RoundelBorderProps;
}

interface RoundelRectangleProps {
  width: number;
  height: number;
  top: number;
  left: number;
  color: string;
  border?: RoundelBorderProps;
}

interface makeRoundelOptions {
  margin?: number;
  outerCircleRatio?: number;
  innerCircleRatio?: number;
  rectHeightRatio?: number;
  fontSize?: number;
}

export interface RoundelProps {
  size: number;
  position: RoundelPosition;
  width: number;
  height: number;
  margin: number;
  innerCircle: RoundelCircleProps;
  outerCircle: RoundelCircleProps;
  rect: RoundelRectangleProps;
  label: RoundelLabelProps;
}

export function calcFontSize(size: number, text: string, defaultFontSize = 16) {
  console.log(`calcFontSize: ${size} ${text} ${defaultFontSize}`);

  if (text.length === 0) return '0px';

  if (defaultFontSize < 6) return '6px';

  const fSize =  defaultFontSize;
  const textWidth = text.length * fSize * 1.2;
  if (textWidth > size) {
    return calcFontSize(size, text, defaultFontSize - 1);
  }
  console.log(fSize);
  return `${fSize}px`;
}

export function makeRoundel(
  size: number,
  position: RoundelPosition,
  label: RoundelLabelProps,
  innerCircle: RoundelCircleProps,
  outerCircle: RoundelCircleProps,
  rect: RoundelRectangleProps,
  options?: makeRoundelOptions
): RoundelProps {
  const RoundelMargin = options?.margin ?? 0.25;
  const RoundelOuterCircleRatio = options?.outerCircleRatio ?? 0.8;
  const RoundelInnerCircleRatio = options?.innerCircleRatio ?? 0.6666666666;
  const RoundelRectHeightRatio = options?.rectHeightRatio ?? 0.15;
  const X = position.x ?? 0;
  const Y = position.y ?? 0;
  const Height = size * (1 + RoundelMargin);
  const Width = size * (1 + RoundelMargin);
  const RectWidth = size;
  const RectHeight = size * RoundelRectHeightRatio;

  const outerCircleRadius = (size * RoundelOuterCircleRatio) / 2;
  const strokeWidth = 1;

  const roundel: RoundelProps = {
    size: size,
    position: { x: X, y: Y },
    height: size * (1 + RoundelMargin),
    width: size * (1 + RoundelMargin),
    margin: size * RoundelMargin,

    innerCircle: {
      radius: outerCircleRadius * RoundelInnerCircleRatio,
      color: innerCircle.color,
      center: { x: X + Height / 2, y: Y + Width / 2 },
    },

    outerCircle: {
      radius: outerCircleRadius,
      color: outerCircle.color,
      center: { x: X + Height / 2, y: Y + Width / 2 },
    },

    rect: {
      width: size,
      height: RectHeight,
      top: Y + Height / 2 - RectHeight / 2,
      left: X + Width / 2 - RectWidth / 2,
      color: rect.color,
      border: {
        strokeWidth: strokeWidth,
        stroke: rect.border?.stroke ?? rect.color,
      },
    },

    label: {
      text: label.text,
      color: label.color,
      fontSize: calcFontSize(size * (1 + RoundelMargin), label.text),
      fontWeight: label.fontWeight ?? 'normal',
    },
  };

  return roundel;
}

export interface Props {
  size: number;
  position: RoundelPosition;
  width: number;
  height: number;
  margin?: number;
  innerCircle: RoundelCircleProps;
  outerCircle: RoundelCircleProps;
  rect: RoundelRectangleProps;
  label: RoundelLabelProps;
}

const roundel = Astro.props;

// <div class="flex items-center justify-center h-full">
---

  <svg
    width={`${roundel.width}`}
    height={`${roundel.height}`}
    viewBox={`${roundel.position.x} ${roundel.position.y} ${roundel.width} ${roundel.height}`}
    xmlns="http://www.w3.org/2000/svg"
  >
    <!-- Outer Circle -->
    <circle
      cx={roundel.outerCircle.center.x}
      cy={roundel.outerCircle.center.y}
      r={roundel.outerCircle.radius}
      fill={roundel.outerCircle.color}
      stroke={roundel.outerCircle.border?.stroke}
      stroke-width={roundel.outerCircle.border?.strokeWidth}></circle>

    <!-- Inner Circle -->
    <circle
      cx={roundel.innerCircle.center.x}
      cy={roundel.innerCircle.center.y}
      r={roundel.innerCircle.radius}
      fill={roundel.innerCircle.color}
      stroke={roundel.innerCircle.border?.stroke}
      stroke-width={roundel.innerCircle.border?.strokeWidth}></circle>

    <!-- Rectangle -->
    <rect
      x={roundel.rect.left}
      y={roundel.rect.top}
      width={roundel.rect.width}
      height={roundel.rect.height}
      fill={roundel.rect.color}
      stroke={roundel.rect.border?.stroke}
      stroke-width={roundel.rect.border?.strokeWidth}></rect>

    <text
      x={roundel.rect.left + roundel.rect.width / 2}
      y={roundel.rect.top + roundel.rect.height / 2}
      text-length=`${roundel.size}px`
      dy="0.105em"
      text-anchor="middle"
      alignment-baseline="middle"
      fill={roundel.label.color}
      font-family="sans-serif"
      font-weight={roundel.label.fontWeight}
      font-size=`${calcFontSize(roundel.size*2 , roundel.label.text)}`
    >
      {roundel.label.text}
    </text>
  </svg>